events {
    worker_connections 1024;
}

http {
    map $cookie_srv_id $backend {
        default                 eyr-backend-random;
        # "10.129.105.161:8080"      eyr-backend-1;
        # "10.129.105.162:8080"      eyr-backend-2;
        # "10.129.105.178:8080"      eyr-backend-3;
        # "10.129.105.179:8080"      eyr-backend-4;
    }

    upstream eyr-backend-random {
        server eyr-backend-1:8080;
        server eyr-backend-2:8080;
        server eyr-backend-3:8080;
        server eyr-backend-4:8080;
    }

    # upstream eyr-backend-1 {
    #     server eyr-backend-1:8080;
    # }

    # upstream eyr-backend-2 {
    #     server eyr-backend-2:8080;
    # }

    # upstream eyr-backend-3 {
    #     server eyr-backend-3:8080;
    # }

    # upstream eyr-backend-4 {
    #     server eyr-backend-4:8080;
    # }

    server {
        listen       80;
        server_name  localhost;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen       443 ssl;
        server_name  localhost;

        ssl_certificate         /etc/nginx/ssl/server.crt;
        ssl_certificate_key     /etc/nginx/ssl/server.key;

        ssl_client_certificate  /etc/nginx/ssl/ca.crt;
        ssl_verify_client       optional;
        ssl_verify_depth        2;

        ssl_protocols           TLSv1.2 TLSv1.3;
        ssl_ciphers             'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:!aNULL:!MD5:!3DES';

        # Optional: SSL pinning
        ssl_stapling on;
        ssl_stapling_verify on;

        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 10s;

        location / {
            if ($ssl_client_verify != SUCCESS) { return 403; }

            # Pass the request to the upstream server
            proxy_pass http://$backend;

            proxy_set_header    Host $host;
            proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto $scheme;

            proxy_set_header    SSL_Client_Issuer $ssl_client_i_dn;
            proxy_set_header    SSL_Client $ssl_client_s_dn;
            proxy_set_header    SSL_Client_Verify $ssl_client_verify;

            # Ensure the cookie name and value format is correct
            add_header Set-Cookie "srv_id=$upstream_addr; Path=/; HttpOnly; Secure;";
        }
    }

    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    'Backend: $upstream_addr';

    access_log /var/log/nginx/access.log main;
}
